{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","changeCardHolder","event","target","value","match","setState","validUser","status","message","length","cardHolder","valid","changeValidTh","validThru","substring","transformCardNumber","number","x","slice","toString","Str1","j","trim","Str","i","validDate","n","changeNumber","e","cardNumber","state","displayMessageDate","displayMessageUser","className","src","this","toUpperCase","type","placeholder","onChange","maxLength","style","color","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd9a578f.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayMessageDate: \"12/08\",\n            displayMessageUser: \"Enter the user name\",\n            cardNumber: \".... .... .... ....\",\n            validThru: \"****\",\n            cardHolder: \"afef mahmoud\",\n            validUser: {\n                status: true,\n                message: \"\"\n            },\n            validDate: {\n                status: true,\n                message: \"\"\n            }\n\n        }\n    }\n    changeCardHolder = (event) => {\n        var onlyTextRegex = /^[0-9\\b]+$/;\n        if (event.target.value.match(onlyTextRegex)) {\n            this.setState({\n                validUser: { status: false, message: \"Tape only text\" }\n            });\n        } else if (event.target.value.length > 20) {\n            this.setState({ validUser: { status: false, message: \"Max length 20\" } });\n        } else {\n            this.setState({\n                cardHolder: event.target.value,\n                valid: { status: true, message: \"\" }\n            });\n        }\n    }\n    changeValidTh = (event) => {\n       // console.log(event.target.value.substring(0, 2))\n        //console.log(event.target.value.substring(2, 4))\n        this.setState({ validThru: event.target.value.substring(0, 2)\n          +\n        event.target.value.substring(2,4) })\n\n    }\n    transformCardNumber =( number) => {\n        if(number.length >15){\n            let x=number.slice(0,16)\n            x=x.toString()\n            let Str1 = ''\n        for(let j =0; j < number.length; j += 4) {\n          Str1 += x.slice(j, j + 4) + ' '\n        }\n        return Str1.trim()\n        }\n        number = number.toString()\n        let Str = ''\n        for(let i =0; i < number.length; i += 4) {\n          Str += number.slice(i, i + 4) + ' '\n        }\n        return Str.trim()\n      }\n    validDate = (n) => {\n        if (n.length !== 4) {\n            return false\n        }\n        n = n.toString()\n        return n.slice(0, 2) +'/' + n.slice(2)\n    }\n\n    changeNumber = (e) => {\n        this.setState({ cardNumber: e.target.value })\n        \n    }\n\n    render() {\n        return (\n            <div className=\"form-container\">\n                <div className=\"main-container\">\n                    <div className=\"header\">\n                        <h1>CREDIT CARD</h1>\n                    </div>\n                    <div className='chip'>\n                        <img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/credit-card-chip-1522262-1288452.png\" />\n                    </div>\n                    <div className=\"content\">\n                        < div className=\"info\">\n                            <div className=\"main-number\">\n                                <h2> {this.transformCardNumber (this.state.cardNumber)}</h2>\n                            </div>\n                            <div className=\"sec-num-validth\">\n                                < div className=\"sec-num\"><h2> 5422</h2></div>\n                                <div className=\"valid-thru\">\n                                    <div className=\"m-y\">\n                                        <p> MONTH/YEAR</p>\n                                    </div>\n                                    <div className=\"container\">\n                                        <div>\n                                            <p>VALID <br />THRU</p>\n                                        </div>\n                                        <div>\n                                            <i className=\"fas fa-caret-right\"></i>\n                                        </div>\n                                        <div>\n                                            <h2 className=\"sec-num\">{this.validDate(this.state.validThru)}</h2>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-holder\" >\n                                <h2>{this.state.cardHolder.toUpperCase()}</h2>\n                            </div>\n                        </div>\n\n                        <div className=\"logo\" >\n                            <img src=\"https://www.logolynx.com/images/logolynx/e0/e01dbbb3068c7f5135b90b0ce91445f9.png\" />\n                        </div>\n\n\n                    </div>\n\n                </div>\n                <br />\n                <br />\n                <br />\n                <form>\n                    <input\n                        type=\"number\"\n                        placeholder=\"Credit card number\"\n                        onChange={(e) => this.changeNumber(e)} />\n                    <br />\n                    <input maxLength=\"4\"\n                        type=\"text\"\n                        placeholder={this.state.displayMessageDate}\n                        onChange={(e) => this.changeValidTh(e)} /><br />\n                    \n                    <input type=\"text\"\n                      \n                        placeholder={this.state.displayMessageUser}\n                        onChange={(event) => this.changeCardHolder(event)} />\n                    <br />\n                    {!this.state.validUser.status ? (\n                        <span style={{ color: \"#ff0000\" }}>{this.state.validUser.message}</span>) : null}\n\n                </form>\n            </div>\n\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}